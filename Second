package com.bank;

import java.sql.Connection;
import java.sql.DriverManager;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.util.ArrayList;
import java.util.List;
import java.util.Scanner;

class InsufficientBalance extends Exception{
	public InsufficientBalance() {
		super("Transaction Failed !!! Insufficient Balance");
	}
}

public class BankApplication {
	
	static Scanner sc;
	static Connection con;
	ResultSet rs;
	private String userAccountNo;
	
	public BankApplication() throws Exception {
		Class.forName("com.mysql.cj.jdbc.Driver");
		
		con = DriverManager.getConnection("jdbc:mysql://localhost:3306/masstech","root","");
		sc = new Scanner(System.in);
	}
	
	public void userLogin() {
		try {
			String username,password;
			System.out.println("Enter Username :: ");
			username = sc.next();
			System.out.println("Enter Password :: ");
			password = sc.next();
			
			String q = "call userLogin('"+username+"','"+password+"')";
			PreparedStatement ps = con.prepareStatement(q);
			rs = ps.executeQuery();
			if(rs.next()) {
				String msg = rs.getString("message");
				System.out.println(msg);
				
				if(!msg.trim().equalsIgnoreCase("login successfully")) {
					return;
				}
				
				
				String p ="select b.accountNo from bank b join auth a on b.userId = a.userId where a.userName = '"+username+"'";
				PreparedStatement pst = con.prepareStatement(p);
				 ResultSet rss = pst.executeQuery();
				 if(rss.next()) {
					 userAccountNo = rss.getString("accountNo");
					 System.out.println("Your Account Number is :: "+userAccountNo);
				 }
				 
				 while(true) {
						System.out.println("******************** Welcome ********************");
						System.out.println("1. Deposit Money");
						System.out.println("2. Withdraw Money");
						System.out.println("3. Transfer Money");
						System.out.println("4. Check balance");
						System.out.println("5. Logout");
						System.out.println("Enter your choice :: ");
						System.out.println("*************************************************");
						
						int choice2=sc.nextInt();
						switch(choice2) {
						case 1 : 
								deposit();
								break;
						case 2 :
								withdraw();
								break;
						case 3 :
								transfer();
								break;
						case 4 :
								checkBalance();
								break;
						case 5 :
								System.out.println("Logging out!!!");
								System.exit(0);
						default :
								System.out.println("Invalid choice! Please try again");
						}
					}
			}
			
			
		}catch(Exception e) {
			System.out.println(e.getMessage());
		}
	}
	
	public void deposit() throws Exception{
		System.out.println("Enter Amount to deposit :: ");
		double amount = sc.nextDouble();
		
		String q ="call deposit_money('"+userAccountNo+"','"+amount+"')";
		PreparedStatement ps = con.prepareStatement(q);
		rs = ps.executeQuery();
		if(rs.next()) {
			System.out.println(rs.getString("message"));
		}else {
			System.out.println(rs.getString("message"));
			System.exit(0);
		}
	}
	public void withdraw() throws Exception{
		
			System.out.println("Enter amount to withdraw :: ");
			double amount = sc.nextDouble();
			
			String q ="select balance from bank where accountNo = '"+userAccountNo+"'";
			PreparedStatement ps = con.prepareStatement(q);
			
			rs = ps.executeQuery();
			if(rs.next()) {
				double p_balance = rs.getDouble("balance");
				try {
					if(p_balance < amount) {
						throw new InsufficientBalance();
					}
					
					String p = "update bank set balance = balance - '"+amount+"' where accountNo ='"+userAccountNo+"'";
					PreparedStatement pst = con.prepareStatement(p);
					pst.executeUpdate();
					
					PreparedStatement pstm = con.prepareStatement(q);
					rs = pstm.executeQuery();
					if(rs.next()) {
						double currentBalance = rs.getDouble("balance");
						System.out.println("Transaction Successfull !!");
						System.out.println("Current Balance is :: "+currentBalance);
					}
				}catch(InsufficientBalance e) {
					System.out.println(e.getMessage());
				}
		}	
	}
	
	public void transfer()throws Exception{
			
		System.out.println("Enter Recipient Account number :: ");
		String raccountNo = sc.next();
		System.out.println("Enter amount to transfer :: ");
		double amount = sc.nextDouble();
		
		try {
			con.setAutoCommit(false);
			String q ="select balance from bank where accountNo = '"+userAccountNo+"'";
			PreparedStatement ps = con.prepareStatement(q);
			rs = ps.executeQuery();
			
			double senderbalance = 0;
			if(rs.next()) {
				senderbalance = rs.getDouble("balance");
			}else {
				System.out.println("Sender account not found");
				con.rollback();
			}
			if(senderbalance < amount ) {
				throw new InsufficientBalance();
			}
			
			String dq = "update bank set balance = balance - '"+amount+"' where accountNo = '"+userAccountNo+"'";
			PreparedStatement pst = con.prepareStatement(dq);
			pst.executeUpdate();
			
			String aq = "update bank set balance = balance + '"+amount+"' where accountNo = '"+raccountNo+"' ";
			PreparedStatement pstm = con.prepareStatement(aq);
			int reff = pstm.executeUpdate();
			if(reff == 0) {
				System.out.println("Receiver account not found !!");
				con.rollback();
				return;
			}
			
			con.commit();
			System.out.println("Transaction successfull!!");
		}
		catch(InsufficientBalance e) {
			System.out.println(e.getMessage());
			con.rollback();
		}catch(Exception e) {
			System.out.println("Transaction failed "+ e.getMessage());
			con.rollback();
		}finally {
			con.setAutoCommit(true);
		}
	}
	
	public void checkBalance() throws Exception {
		
		String q ="call checkBalance('"+userAccountNo+"')";
		PreparedStatement ps = con.prepareStatement(q);
		rs = ps.executeQuery();
		if(rs.next()) {
			System.out.println(rs.getString("balance"));
		}else {
			System.out.println("Account Not Found");
		}
	}
	
	
//	public void createAccount() {
//		try {
//			String username,password,email,holdername,contactno,bankname,branchname;
//			double balance = 500;
//			
//			System.out.println("Enter username :: ");
//			username = sc.next();
//			System.out.println("Enter password :: ");
//			password = sc.next();
//			System.out.println("Enter email");
//			email = sc.next();
//			System.out.println("Enter holder name :: ");
//			holdername = sc.next();sc.nextLine();
//			System.out.println("Enter contact no");
//			contactno = sc.next();
//			
//			 // it will fetch from DB  bankName
//			List<String> bankNames = new ArrayList<>();
//			String q = "select bankName from bank_master order by bankId";
//			PreparedStatement pst = con.prepareStatement(q);
//			ResultSet rs = pst.executeQuery();
//			while(rs.next()) {
//				bankNames.add(rs.getString("bankName"));
//			}
//			
//			System.out.println("Choose Bank :: ");
//			for(int i=0; i<bankNames.size();i++) {
//				System.out.println((i+1) + ". " + bankNames.get(i));
//			}
//			int bankChoice = sc.nextInt();
//			if(bankChoice < 1 || bankChoice > bankNames.size()) {
//				System.out.println("Invalid choice!!");
//				return;
//			}
//			String chosenBank = bankNames.get(bankChoice - 1); 
//			
//			//
//			
//			List<String> branchNames = new ArrayList<>();
//			String p = "SELECT bm.branchName from branch_master bm join bank_master b on bm.bankId = b.bankId where b.bankName ='"+chosenBank+"' order by bm.branchId ";
//				PreparedStatement ps = con.prepareStatement(p);
//					rs = ps.executeQuery();
//			    while (rs.next()) {
//			        branchNames.add(rs.getString("branchName"));
//			    }
//			    
//			   if(branchNames.isEmpty()) {
//				   System.out.println("No branches found for this bank!!");
//				   return;
//			   }
//
//			System.out.println("Choose Branch ::");
//			for (int i = 0; i < branchNames.size(); i++) {
//			    System.out.println((i+1) + ". " + branchNames.get(i));
//			}
//
//			int branchChoice = sc.nextInt();
//			if (branchChoice < 1 || branchChoice > branchNames.size()) {
//			    System.out.println("Invalid choice!!");
//			    return;
//			}
//			String chosenBranch = branchNames.get(branchChoice - 1);
//			
//			
//			
//			
//			
//			String r = "call create_new_user('"+username+"','"+password+"','"+email+"','"+holdername+"','"+contactno+"','"+chosenBank+"','"+chosenBranch+"','"+balance+"')";
//			PreparedStatement pstm = con.prepareStatement(r);
//			rs = pstm.executeQuery();
//			if(rs.next()) {
//				System.out.println(rs.getString("message"));
//			}
//			
//			
//			
//		}catch(Exception e) {
//			System.out.println(e.getMessage());
//		}
//	}
	
	
	public void registerUser() {
	    try {
	        // Step 1: Collect login details
	        System.out.println("Enter username :: ");
	        String username = sc.next();
	        System.out.println("Enter password :: ");
	        String password = sc.next();
	        System.out.println("Enter email :: ");
	        String email = sc.next();
	        System.out.println("Enter holder name :: ");
	        String holderName = sc.next();
	        System.out.println("Enter contact no :: ");
	        String contactNo = sc.next();

	        // Step 2: Choose Bank & Branch
	        String[] chosen = chooseBankAndBranch();
	        String chosenBank = chosen[0];
	        String chosenBranch = chosen[1];

	        double balance = 500;

	        // Step 3: Call procedure to insert into auth, users, and bank
	        String query = "CALL create_new_user(?, ?, ?, ?, ?, ?, ?, ?)";
	        PreparedStatement pst = con.prepareStatement(query);
	        pst.setString(1, username);
	        pst.setString(2, password);
	        pst.setString(3, email);
	        pst.setString(4, holderName);
	        pst.setString(5, contactNo);
	        pst.setString(6, chosenBank);
	        pst.setString(7, chosenBranch);
	        pst.setDouble(8, balance);

	        ResultSet rs = pst.executeQuery();
	        if (rs.next()) {
	            System.out.println(rs.getString("message"));
	        }
	    } catch (Exception e) {
	        System.out.println("Error: " + e.getMessage());
	    }
	}

	public void addBankAccountForExistingUser() {
	    try {
	        // Step 1: Choose Bank & Branch
	        String[] chosen = chooseBankAndBranch();
	        String chosenBank = chosen[0];
	        String chosenBranch = chosen[1];

	        double balance = 500;

	        // Step 2: Call procedure to insert new account for existing userId
	        String query = "CALL add_bank_account(?, ?, ?, ?)";
	        PreparedStatement pst = con.prepareStatement(query);
	        pst.setInt(1, loggedInUserId); // store this after login
	        pst.setString(2, chosenBank);
	        pst.setString(3, chosenBranch);
	        pst.setDouble(4, balance);

	        ResultSet rs = pst.executeQuery();
	        if (rs.next()) {
	            System.out.println(rs.getString("message"));
	        }
	    } catch (Exception e) {
	        System.out.println("Error: " + e.getMessage());
	    }
	}

	// Utility function to choose bank and branch
	private String[] chooseBankAndBranch() throws Exception {
	    List<String> bankNames = new ArrayList<>();
	    PreparedStatement pst = con.prepareStatement("SELECT bankName FROM bank_master ORDER BY bankId");
	    ResultSet rs = pst.executeQuery();
	    while (rs.next()) {
	        bankNames.add(rs.getString("bankName"));
	    }
	    System.out.println("Choose Bank:");
	    for (int i = 0; i < bankNames.size(); i++) {
	        System.out.println((i + 1) + ". " + bankNames.get(i));
	    }
	    int bankChoice = sc.nextInt();
	    String chosenBank = bankNames.get(bankChoice - 1);

	    // Fetch branches for chosen bank
	    List<String> branchNames = new ArrayList<>();
	    pst = con.prepareStatement(
	        "SELECT bm.branchName FROM branch_master bm JOIN bank_master b ON bm.bankId = b.bankId WHERE b.bankName = ? ORDER BY bm.branchId"
	    );
	    pst.setString(1, chosenBank);
	    rs = pst.executeQuery();
	    while (rs.next()) {
	        branchNames.add(rs.getString("branchName"));
	    }
	    System.out.println("Choose Branch:");
	    for (int i = 0; i < branchNames.size(); i++) {
	        System.out.println((i + 1) + ". " + branchNames.get(i));
	    }
	    int branchChoice = sc.nextInt();
	    String chosenBranch = branchNames.get(branchChoice - 1);

	    return new String[] { chosenBank, chosenBranch };
	}
	
	
	
	
	public static void main(String[] args) throws Exception {
		BankApplication bank = new BankApplication();
		boolean isLoggedIn = false;
		int loggedInUserId = -1; // store the logged-in user's ID

		Scanner sc = new Scanner(System.in);

		while (true) {
		    if (!isLoggedIn) {
		        System.out.println("******************** Welcome ********************");
		        System.out.println("1. Register (New User)");
		        System.out.println("2. Login (Existing User)");
		        System.out.println("3. Exit");
		        System.out.println("*************************************************");

		        int choice = sc.nextInt();
		        sc.nextLine(); // clear buffer

		        switch (choice) {
		            case 1:
		                bank.registerUser(); // Calls procedure create_new_user
		                break;
		            case 2:
		                loggedInUserId = loginUser(con); // Returns userId if success, else -1
		                if (loggedInUserId != -1) {
		                    isLoggedIn = true;
		                    System.out.println("Login Successful!");
		                } else {
		                    System.out.println("Invalid Username/Password!");
		                }
		                break;
		            case 3:
		                System.out.println("Exiting...");
		                return;
		            default:
		                System.out.println("Invalid choice!");
		        }

		    } else {
		        System.out.println("******************** Main Menu ********************");
		        System.out.println("1. Deposit Money");
		        System.out.println("2. Withdraw Money");
		        System.out.println("3. Transfer Money");
		        System.out.println("4. Check Balance");
		        System.out.println("5. Add New Bank Account");
		        System.out.println("6. Logout");
		        System.out.println("***************************************************");

		        int choice = sc.nextInt();
		        sc.nextLine(); // clear buffer

		        switch (choice) {
		            case 1:
		                bank.deposit();
		                break;
		            case 2:
		                bank.withdraw();
		                break;
		            case 3:
		                bank.transfer();
		                break;
		            case 4:
		                bank.checkBalance();
		                break;
		            case 5:
		                bank.addBankAccountForExistingUser();
		                break;
		            case 6:
		                isLoggedIn = false;
		                System.out.println("Logged out successfully!");
		                break;
		            default:
		                System.out.println("Invalid choice!");
		        }
		    }
		}

		
	}
	

}
 ////////////////////////////////////////////////////


DELIMITER $$

CREATE PROCEDURE create_new_user(
    IN p_userName    VARCHAR(100),
    IN p_userPasswd  VARCHAR(100),
    IN p_userEmail   VARCHAR(100),
    IN p_holderName  VARCHAR(100),
    IN p_contactNo   VARCHAR(100),
    IN p_bankName    VARCHAR(100),
    IN p_branchName  VARCHAR(100),
    IN p_balance     DECIMAL(15,2)
)
proc_block : BEGIN
    DECLARE p_userId INT;
    DECLARE p_accountNo VARCHAR(100);
    DECLARE p_ifscCode  VARCHAR(100);
    DECLARE user_exists INT;
    DECLARE bank_exists INT;
    DECLARE branch_exists INT;

    -- Check if username or email exists
    SELECT COUNT(*) INTO user_exists
    FROM auth
    WHERE userName = p_userName OR userEmail = p_userEmail;

    IF user_exists > 0 THEN
        SELECT 'Username or Email already exists' AS message;
        LEAVE proc_block;
    END IF;

    -- Check if bank exists
    SELECT COUNT(*) INTO bank_exists
    FROM bank_master
    WHERE bankName = p_bankName;

    IF bank_exists = 0 THEN
        SELECT 'Invalid bank name' AS message;
        LEAVE proc_block;
    END IF;

    -- Check if branch exists for that bank
    SELECT COUNT(*) INTO branch_exists
    FROM branch_master bm
    JOIN bank_master b ON bm.bankId = b.bankId
    WHERE b.bankName = p_bankName AND bm.branchName = p_branchName;

    IF branch_exists = 0 THEN
        SELECT 'Invalid branch for selected bank' AS message;
        LEAVE proc_block;
    END IF;

    -- Insert into auth
    INSERT INTO auth(userName, userEmail, userPasswd)
    VALUES (p_userName, p_userEmail, p_userPasswd);
    SET p_userId = LAST_INSERT_ID();

    -- Insert into users
    INSERT INTO users(userId, holderName, contactNo)
    VALUES (p_userId, p_holderName, p_contactNo);

    -- Generate accountNo and ifscCode
    SET p_accountNo = CONCAT(LEFT(p_bankName, 3), FLOOR(10000 + RAND() * 90000));
    SET p_ifscCode  = CONCAT(LEFT(p_branchName, 3), FLOOR(100 + RAND() * 900));

    -- Insert into bank
    INSERT INTO bank(accountNo, ifscCode, bankName, branchName, balance, userId)
    VALUES (p_accountNo, p_ifscCode, p_bankName, p_branchName, p_balance, p_userId);

    SELECT 'User Registered Successfully!!' AS message;
END$$

DELIMITER ;  




DELIMITER $$

CREATE PROCEDURE add_bank_account(
    IN p_userId     INT,
    IN p_bankName   VARCHAR(100),
    IN p_branchName VARCHAR(100),
    IN p_balance    DECIMAL(15,2)
)
proc_block : BEGIN
    DECLARE bank_exists INT;
    DECLARE branch_exists INT;
    DECLARE p_accountNo VARCHAR(100);
    DECLARE p_ifscCode  VARCHAR(100);

    -- Check if bank exists
    SELECT COUNT(*) INTO bank_exists
    FROM bank_master
    WHERE bankName = p_bankName;

    IF bank_exists = 0 THEN
        SELECT 'Invalid bank name' AS message;
        LEAVE proc_block;
    END IF;

    -- Check if branch exists for that bank
    SELECT COUNT(*) INTO branch_exists
    FROM branch_master bm
    JOIN bank_master b ON bm.bankId = b.bankId
    WHERE b.bankName = p_bankName AND bm.branchName = p_branchName;

    IF branch_exists = 0 THEN
        SELECT 'Invalid branch for selected bank' AS message;
        LEAVE proc_block;
    END IF;

    -- Generate accountNo and ifscCode
    SET p_accountNo = CONCAT(LEFT(p_bankName, 3), FLOOR(10000 + RAND() * 90000));
    SET p_ifscCode  = CONCAT(LEFT(p_branchName, 3), FLOOR(100 + RAND() * 900));

    -- Insert into bank table
    INSERT INTO bank(accountNo, ifscCode, bankName, branchName, balance, userId)
    VALUES (p_accountNo, p_ifscCode, p_bankName, p_branchName, p_balance, p_userId);

    SELECT 'Bank Account Added Successfully!!' AS message;
END$$

DELIMITER ;



CREATE DEFINER=`root`@`localhost` PROCEDURE `userLogin`(
	in p_userName varchar(100),
    in p_userPasswd varchar(100)
)
begin 
  declare cint int;
  
  select count(*) into cint from auth where (userName = p_userName and userPasswd = p_userPasswd);
  
  if(cint > 0) then
		select 'login successfully ' as message;
  else
		select 'Invalid username or password' as message;
  end if ;
end 




CREATE DEFINER=`root`@`localhost` PROCEDURE `checkBalance`(
	in p_accountNo varchar(100)
)
begin 
	select balance from bank where accountNo = p_accountNo;
end



CREATE DEFINER=`root`@`localhost` PROCEDURE `deposit_money`(
	in p_accountNo varchar(100),
    in p_balance decimal(15,2)
)
begin
	declare cint int;
    select count(*) into cint from bank where (accountNo = p_accountNo);
  
  if(cint > 0) then
		select 'Transaction successfull!!' as message;
		update bank set balance = balance + p_balance where accountNo = p_accountNo;
  else
		select 'Wrong Account Number Transaction Failed!!!' as message;
  end if ;
end


CREATE DEFINER=`root`@`localhost` PROCEDURE `create_user`(
    IN p_userName    VARCHAR(100),
    IN p_userPasswd  VARCHAR(100),
    IN p_userEmail   VARCHAR(100),
    IN p_holderName  VARCHAR(100),
    IN p_contactNo   VARCHAR(100),
    IN p_bankName    VARCHAR(100),
    IN p_branchName  VARCHAR(100),
    IN p_balance     DECIMAL(15,2)
)
proc_block : BEGIN
    DECLARE p_userId int;
    DECLARE p_accountNo VARCHAR(100);
    DECLARE p_ifscCode  VARCHAR(100);
    DECLARE user_exists INT;
    DECLARE bank_exists INT;
    DECLARE branch_exists INT;

   
    SELECT COUNT(*) INTO user_exists
    FROM auth
    WHERE userName = p_userName OR userEmail = p_userEmail;

    IF user_exists > 0 THEN
        SELECT 'Username or Email already exists' AS message;
        leave proc_block ;
    END IF;

   
    SELECT COUNT(*) INTO bank_exists
    FROM bank_master
    WHERE bank_name = p_bankName;

    IF bank_exists = 0 THEN
        SELECT 'Invalid bank name' AS message;
        leave proc_block ;
    END IF;

    
    SELECT COUNT(*) INTO branch_exists
    FROM branch_master bm
    JOIN bank_master b ON bm.bank_id = b.bank_id
    WHERE b.bank_name = p_bankName AND bm.branch_name = p_branchName;

    IF branch_exists = 0 THEN
        SELECT 'Invalid branch for selected bank' AS message;
        leave proc_block ;
    END IF;
  
    INSERT INTO auth(userName, userEmail, userPasswd)
    VALUES (p_userName, p_userEmail, p_userPasswd);

    SET p_userId = LAST_INSERT_ID();

    INSERT INTO users(userId, holderName, contactNo)
    VALUES (p_userId, p_holderName, p_contactNo);
   
    SET p_accountNo = CONCAT(p_bankName, FLOOR(10000 + RAND() * 90000));
    SET p_ifscCode  = CONCAT(LEFT(p_branchName, 3), p_contactNo);

    INSERT INTO bank(accountNo, ifscCode, bankName, branchName, balance, userId)
    VALUES (p_accountNo, p_ifscCode, p_bankName, p_branchName, p_balance, p_userId);

    SELECT 'User Registered Successfully!!' AS message;
END


create table bank_master(
	bankId int auto_increment primary key,
    bankName varchar(100) not null
    );
    
create table branch_master(
	branchId int auto_increment primary key,
    bankId int not null,
    branchName varchar(100),
    foreign key (bankId) references bank_master(bankId)
);

delimiter $$
create procedure create_user(
    IN p_userName    VARCHAR(100),
    IN p_userPasswd  VARCHAR(100),
    IN p_userEmail   VARCHAR(100),
    IN p_holderName  VARCHAR(100),
    IN p_contactNo   VARCHAR(100),
    IN p_bankName    VARCHAR(100),
    IN p_branchName  VARCHAR(100),
    IN p_balance     DECIMAL(15,2)
)
proc_block : BEGIN
    DECLARE p_userId int;
    DECLARE p_accountNo VARCHAR(100);
    DECLARE p_ifscCode  VARCHAR(100);
    DECLARE user_exists INT;
    DECLARE bank_exists INT;
    DECLARE branch_exists INT;

   
    SELECT COUNT(*) INTO user_exists
    FROM auth
    WHERE userName = p_userName OR userEmail = p_userEmail;

    IF user_exists > 0 THEN
        SELECT 'Username or Email already exists' AS message;
        leave proc_block ;
    END IF;

   
    SELECT COUNT(*) INTO bank_exists
    FROM bank_master
    WHERE bank_name = p_bankName;

    IF bank_exists = 0 THEN
        SELECT 'Invalid bank name' AS message;
        leave proc_block ;
    END IF;

    
    SELECT COUNT(*) INTO branch_exists
    FROM branch_master bm
    JOIN bank_master b ON bm.bank_id = b.bank_id
    WHERE b.bank_name = p_bankName AND bm.branch_name = p_branchName;

    IF branch_exists = 0 THEN
        SELECT 'Invalid branch for selected bank' AS message;
        leave proc_block ;
    END IF;
  
    INSERT INTO auth(userName, userEmail, userPasswd)
    VALUES (p_userName, p_userEmail, p_userPasswd);

    SET p_userId = LAST_INSERT_ID();

    INSERT INTO users(userId, holderName, contactNo)
    VALUES (p_userId, p_holderName, p_contactNo);
   
    SET p_accountNo = CONCAT(p_bankName, FLOOR(10000 + RAND() * 90000));
    SET p_ifscCode  = CONCAT(LEFT(p_branchName, 3), p_contactNo);

    INSERT INTO bank(accountNo, ifscCode, bankName, branchName, balance, userId)
    VALUES (p_accountNo, p_ifscCode, p_bankName, p_branchName, p_balance, p_userId);

    SELECT 'User Registered Successfully!!' AS message;
END$$
DELIMITER ;

insert into bank_master(bankName) values('HDFC'),('SBI'),('BOB');
insert into branch_master(bankId,branchName) values(3,'NAIGAON'),(3,'VASAI'),(3,'VIRAR');
